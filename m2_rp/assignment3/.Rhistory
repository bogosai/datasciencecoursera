#         f <- data.frame()
#         f <- readData[readData[,1]==num,]
#         f <- f$'Hospital.Name'
#
# } else {f<-"NA"}
#
# Hospital.Name <<- f
# Hospital.Name
}
rankhospital("TX", "pneumonia", 10)
d<-rankhospital("TX", "pneumonia", 10)
d
d[,1]
d[,c(2,7)]
d[,1:5]
d[,1:5]
d[,c(1,3,7)]
d[,c(1,3,7)]
d1d[,c(1,3,7,11,17,23)]
d1<-d[,c(1,3,7,11,17,23)]
d1
colnames(d1) <- names("hotel","state","ha","hf","pn")
d
d1
colnames(d1) <- names("seq","hotel","state","ha","hf","pn")
names(d1)
class(d1)
colnames(d1) <- c("seq","hotel","state","ha","hf","pn")
d1
d1
names(d1)
d1
rankhospital <- function(state,outcome,num="best") {
outcome <- tolower(outcome)
state <- toupper(state)
#checking whether num is either best or worst, if is.character at all
#limiting Outcome to Heart Attack, Heart Failure, Pheumonia
if (outcome == "heart attack") {
i <- 11
} else if (outcome == "heart failure") {
i <- 17
} else if (outcome == "pneumonia") {
i <- 23
} else {
stop("invalid outcome")
}
readData <- data.frame()
readData <- read.csv("outcome-of-care-measures.csv", colClasses = "character",stringsAsFactors=FALSE)
#checking if state provided exists in data regardless CASE
if (nrow(readData[readData[,"State"]==state,])==0) stop("Invalid state")
#filtering data on State and Outcome column on NA and Not Availables
readData <- readData[readData[,"State"]==state & !is.na(readData[,i]) & readData[,i]!="Not Available",]
lens<- length(readData[,i])
readData <- readData[order(readData[,i],readData[,"Hospital.Name"]),]
readData <- cbind(seq_along(1:lens),readData)
print(readData)
# if (sum(num==c("best","worst"))>=1) {
#         if (num=="best") {num <- 1}
#         else if (num == "worst") {num <- lens}
#         else if (is.character(num)) {num <- lens+1}
# } else if (is.character(num)) {num <- lens+1}
#
#
# if(lens >= num) {
#         f <- data.frame()
#         f <- readData[readData[,1]==num,]
#         f <- f$'Hospital.Name'
#
# } else {f<-"NA"}
#
# Hospital.Name <<- f
# Hospital.Name
}
rankhospital("TX", "pneumonia", 10)
rankhospital("TX", "pneumonia", 10)
d1
d <- rankhospital("TX", "pneumonia", 10)
d1 <- d[,c(1,3,7,11,17,23)]
d1
colnames(d1) <- c("seq","h","st","ha","hf","pn")
d1
d
d1 <- d[,c(1,3,8,12,18,24)]
d1
colnames(d1) <- c("seq","h","st","ha","hf","pn")
d1
d1[d1[,pn]==10.0,]
d1[d1[,pn]==10,]
d1[d1[,"pn"]==10,]
d1[d1[,"pn"]==10.0,]
d1[d1[,"pn"]==10,]
d1[d1[,"pn"]==12.4,]
d1[d1[,"pn"]==10,]
d1[d1[,"pn"]==10.0,]
d1[d1[,"pn"]==10.0L,]
d1[d1[,"pn"]==10L,]
d1
d1[d1[,"pn"]==10,]
d1[d1[,"pn"]==10.1,]
d1[1:11,]
d1[1:12,]
d1[10,]
d1[9,]
d1[8,]
d1[7,]
d1[5,]
f<-10.0
f
f==10
f==10.0
d1[d1[1:10,"pn"]==10.0,]
d1[d1[1:10,"pn"]==10.1,]
d1[d1[,"pn"]==10.1,]
d1[d1[,"pn"]==10.2,]
d1[d1[,"pn"]==10.2,]
d1[d1[,"pn"]==10.1,]
d1[d1[,"pn"]==10.0,]
d1[d1[,"pn"]==10,]
d1[d1[,"pn"]===10,]
d1[d1[,"pn"]==10,]
d1[d1[,"pn"]==10.0,]
d1[d1[,"pn"]==9,]
d1[d1[,"pn"]==9.1,]
d1[d1[,"pn"]==9.1,]
d1[d1[,"pn"]==8.1,]
d1[d1[,"pn"]==7.1,]
d
d1
tail(d1,20)
d1[order(d1[,6]),]
d1[order(d1[,6]),]
d1[order(d1[,as.numeric(6)]),]
class(d1[,6])
as.numeric(d1[,6])
order(as.numeric(d1[,6]))
as.numeric(d1[,6])
as.numeric(d1[,6])
order(as.numeric(d1[,6]))
as.numeric(d1[,6])
rankhospital <- function(state,outcome,num="best") {
outcome <- tolower(outcome)
state <- toupper(state)
#checking whether num is either best or worst, if is.character at all
#limiting Outcome to Heart Attack, Heart Failure, Pheumonia
if (outcome == "heart attack") {
i <- 11
} else if (outcome == "heart failure") {
i <- 17
} else if (outcome == "pneumonia") {
i <- 23
} else {
stop("invalid outcome")
}
readData <- data.frame()
readData <- read.csv("outcome-of-care-measures.csv") #, colClasses = "character",stringsAsFactors=FALSE)
#checking if state provided exists in data regardless CASE
if (nrow(readData[readData[,"State"]==state,])==0) stop("Invalid state")
#filtering data on State and Outcome column on NA and Not Availables
readData <- readData[readData[,"State"]==state & !is.na(readData[,i]) & readData[,i]!="Not Available",]
lens<- length(readData[,i])
readData <- readData[order(readData[,i],readData[,"Hospital.Name"]),]
readData <- cbind(seq_along(1:lens),readData)
print(readData)
# if (sum(num==c("best","worst"))>=1) {
#         if (num=="best") {num <- 1}
#         else if (num == "worst") {num <- lens}
#         else if (is.character(num)) {num <- lens+1}
# } else if (is.character(num)) {num <- lens+1}
#
#
# if(lens >= num) {
#         f <- data.frame()
#         f <- readData[readData[,1]==num,]
#         f <- f$'Hospital.Name'
#
# } else {f<-"NA"}
#
# Hospital.Name <<- f
# Hospital.Name
}
rankhospital("TX", "pneumonia", 10)
d<-rankhospital("TX", "pneumonia", 10)
d
d1<-d[2,7,11,17,23]
d1<-d[1,3,8,12,18,24]
d1<-d[,c(1,3,8,12,18,24)]
d1
d[,24]
class(d[,24])
rankhospital <- function(state,outcome,num="best") {
outcome <- tolower(outcome)
state <- toupper(state)
#checking whether num is either best or worst, if is.character at all
#limiting Outcome to Heart Attack, Heart Failure, Pheumonia
if (outcome == "heart attack") {
i <- 11
} else if (outcome == "heart failure") {
i <- 17
} else if (outcome == "pneumonia") {
i <- 23
} else {
stop("invalid outcome")
}
readData <- data.frame()
readData <- read.csv("outcome-of-care-measures.csv",stringsAsFactors=FALSE) #colClasses = "character"
#checking if state provided exists in data regardless CASE
if (nrow(readData[readData[,"State"]==state,])==0) stop("Invalid state")
#filtering data on State and Outcome column on NA and Not Availables
readData <- readData[readData[,"State"]==state & !is.na(readData[,i]) & readData[,i]!="Not Available",]
lens<- length(readData[,i])
readData <- readData[order(readData[,i],readData[,"Hospital.Name"]),]
readData <- cbind(seq_along(1:lens),readData)
print(readData)
# if (sum(num==c("best","worst"))>=1) {
#         if (num=="best") {num <- 1}
#         else if (num == "worst") {num <- lens}
#         else if (is.character(num)) {num <- lens+1}
# } else if (is.character(num)) {num <- lens+1}
#
#
# if(lens >= num) {
#         f <- data.frame()
#         f <- readData[readData[,1]==num,]
#         f <- f$'Hospital.Name'
#
# } else {f<-"NA"}
#
# Hospital.Name <<- f
# Hospital.Name
}
d<-rankhospital("TX", "pneumonia", 10)
d1<-d[,c(1,3,8,12,18,24)]
d1
d1[,2]
d1[,24]
d1[,6]
class(d1[,6])
as.numeric(d1[,6])
d1[as.numeric(d1[,6])<10,]
d1[d1[,6]<10,]
d1[d1[,6]<11,]
d1[d1[,6]<10,]
d1[order(d1[,6]),]
d1[order(as.numeric(d1[,6])),]
rankhospital <- function(state,outcome,num="best") {
outcome <- tolower(outcome)
state <- toupper(state)
#checking whether num is either best or worst, if is.character at all
#limiting Outcome to Heart Attack, Heart Failure, Pheumonia
if (outcome == "heart attack") {
i <- 11
} else if (outcome == "heart failure") {
i <- 17
} else if (outcome == "pneumonia") {
i <- 23
} else {
stop("invalid outcome")
}
readData <- data.frame()
readData <- read.csv("outcome-of-care-measures.csv",stringsAsFactors=FALSE) #colClasses = "character"
#checking if state provided exists in data regardless CASE
if (nrow(readData[readData[,"State"]==state,])==0) stop("Invalid state")
#filtering data on State and Outcome column on NA and Not Availables
readData <- readData[readData[,"State"]==state & !is.na(readData[,i]) & readData[,i]!="Not Available",]
lens<- length(readData[,i])
readData <- readData[order(as.numeric(readData[,i]),readData[,"Hospital.Name"]),]
readData <- cbind(seq_along(1:lens),readData)
# print(readData)
if (sum(num==c("best","worst"))>=1) {
if (num=="best") {num <- 1}
else if (num == "worst") {num <- lens}
else if (is.character(num)) {num <- lens+1}
} else if (is.character(num)) {num <- lens+1}
if(lens >= num) {
f <- data.frame()
f <- readData[readData[,1]==num,]
f <- f$'Hospital.Name'
} else {f<-"NA"}
Hospital.Name <<- f
Hospital.Name
}
rankhospital("TX", "pneumonia", 10)
rankhospital("TX", "pneumonia", 10)
rankhospital("WA", "heart attack", 7)
rankhospital("NC", "heart attack", "worst")
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome,num="best") {
outcome <- tolower(outcome)
#checking whether num is either best or worst, if is.character at all
#limiting Outcome to Heart Attack, Heart Failure, Pheumonia
if (outcome == "heart attack") {
i <- 11
} else if (outcome == "heart failure") {
i <- 17
} else if (outcome == "pneumonia") {
i <- 23
} else {
stop("invalid outcome")
}
readData <- data.frame()
readData <- read.csv("outcome-of-care-measures.csv", stringsAsFactors=FALSE)
#checking if state provided exists in data regardless CASE
#if (nrow(readData[readData[,"State"]==state,])==0) stop("Invalid state")
#filtering data on State and Outcome column on NA and Not Availables
fstate <- levels(factor(readData[,7]))
lstate <- length(fstate)
# lstate
Hospital.Name <- data.frame()
for (k in 1:lstate) {
areadData <- readData[readData[,"State"]==fstate[k] & !is.na(readData[,i]) & readData[,i]!="Not Available",]
#
lens<- length(areadData[,i])
#
#
areadData <- areadData[order(as.numeric(areadData[,i]),areadData[,"Hospital.Name"]),]
#
#
areadData <- cbind(seq_along(1:lens),areadData)
# print(areadData[,1])
anum <- tolower(num)
#
if (sum(anum==c("best","worst"))>=1) {
if (anum=="best") {anum <- 1}
else if (anum == "worst") {anum <- lens}
else if (is.character(num)) {anum <- lens+1}
} else if (is.character(num)) {anum <- lens+1}
else {anum <- num}
# print(c(k,anum))
#
#
if(lens >= anum) {
f <- data.frame()
f <- areadData[areadData[,1]==anum,]
f <- f$'Hospital.Name'
} else {f<-"NA"}
# print(f)
Hospital.Name <- rbind.data.frame(Hospital.Name,data.frame(f,fstate[k]))
}
colnames(Hospital.Name) <- c("Hospital","State")
print(Hospital.Name)
}
r <- rankall("heart attack", 4)
r <- rankall("heart attack", 4)
r<-rankall("heart attack", 4)
r
as.character(subset(r, state == "HI")$hospital)
rankall <- function(outcome,num="best") {
outcome <- tolower(outcome)
#checking whether num is either best or worst, if is.character at all
#limiting Outcome to Heart Attack, Heart Failure, Pheumonia
if (outcome == "heart attack") {
i <- 11
} else if (outcome == "heart failure") {
i <- 17
} else if (outcome == "pneumonia") {
i <- 23
} else {
stop("invalid outcome")
}
readData <- data.frame()
readData <- read.csv("outcome-of-care-measures.csv", stringsAsFactors=FALSE)
#checking if state provided exists in data regardless CASE
#if (nrow(readData[readData[,"State"]==state,])==0) stop("Invalid state")
#filtering data on State and Outcome column on NA and Not Availables
fstate <- levels(factor(readData[,7]))
lstate <- length(fstate)
# lstate
Hospital.Name <- data.frame()
for (k in 1:lstate) {
areadData <- readData[readData[,"State"]==fstate[k] & !is.na(readData[,i]) & readData[,i]!="Not Available",]
#
lens<- length(areadData[,i])
#
#
areadData <- areadData[order(as.numeric(areadData[,i]),areadData[,"Hospital.Name"]),]
#
#
areadData <- cbind(seq_along(1:lens),areadData)
# print(areadData[,1])
anum <- tolower(num)
#
if (sum(anum==c("best","worst"))>=1) {
if (anum=="best") {anum <- 1}
else if (anum == "worst") {anum <- lens}
else if (is.character(num)) {anum <- lens+1}
} else if (is.character(num)) {anum <- lens+1}
else {anum <- num}
# print(c(k,anum))
#
#
if(lens >= anum) {
f <- data.frame()
f <- areadData[areadData[,1]==anum,]
f <- f$'Hospital.Name'
} else {f<-"NA"}
# print(f)
Hospital.Name <- rbind.data.frame(Hospital.Name,data.frame(f,fstate[k]))
}
colnames(Hospital.Name) <- c("hospital","state")
print(Hospital.Name)
}
r<-rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
library(XML)
readFromXML <- function(){
fileURL <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
}
d<-readFromXML()
d<-readFromXML()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?play
?read.csv
read.csv(path2csv,stringsAsFactors = FALSE)
nxt()
read.csv(path2csv,stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageversion("dplyr")
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arh)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-5:20)
select(cran,size=-5:20)
select(cran,num_range("size",-5:20))
-5:20
-(5:20)
cran
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
play()
select(cran,country)
select(cran,country==in)
select(cran,country==IN)
select(cran,country=="IN")
select(cran,country)
select(cran,country=="IN")
select(cran,country== "IN")
select(cran,country == "IN")
select(cran,country)
select(cran,country == "us")
nxt()
select(cran,country == "us")
select(cran,country == "IN")
Filter(cran,country == "IN")
filter(cran,country == "IN")
filter(cran, r_version == "3.1.1", country == "IN")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500,r_os=="linux--gnu")
filter(cran, size>100500,r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran,ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package,ip_id)
arrange(cran2, country,desc(r_version),ip_id)
cran3<-select(cran,ip_id, package,size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
?tbl_df
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- summarize(cran,group_by(package))
by_package <- group_by(package)
by_package <- group_by(cran,package)
by_package
?summarize
summarize(cran,package.skeleton())
summarize(cran,package)
summarize(cran)
summarize(by_package,mean(size))
summarize(by_package,mean(size))
quit
quit()
